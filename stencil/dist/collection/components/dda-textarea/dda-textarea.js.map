{"version":3,"file":"dda-textarea.js","sourceRoot":"","sources":["../../../src/components/dda-textarea/dda-textarea.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, Host, Element, State } from '@stencil/core';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.snow.css';\r\n\r\n@Component({\r\n  tag: 'dda-textarea',\r\n  styleUrls: ['../../global/global.css', '../../global/input.css'],\r\n  shadow: false,\r\n})\r\nexport class DdaTextarea {\r\n  @Prop() placeholder: string;\r\n  @Prop() label: string;\r\n  @Prop() value: string = '';\r\n  @Prop() error_message: string;\r\n  @Prop() validation_type?: string;\r\n  @Prop() input_status?: string; // Custom prop for different textarea types\r\n  @Prop() helper_text?: string;\r\n  @Prop() custom_class?: string;\r\n  @Prop() enable_rich_editor?: boolean; // Prop to enable rich text editor\r\n  @Prop() max_characters: number;\r\n  @Prop() component_mode?: string; \r\n  @Prop() input_id: string;\r\n  @Prop() aria_label?: string;\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  @State() characterCount: number = 0; // State to track the character count\r\n\r\n  private quill: Quill;\r\n\r\n  componentDidLoad() {\r\n    if (this.enable_rich_editor) {\r\n      const editor = this.el.querySelector('#editor') as HTMLElement;\r\n      this.quill = new Quill(editor, {\r\n        modules: {\r\n          toolbar: [\r\n            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n            ['blockquote', 'code-block'],\r\n        \r\n            [{ 'list': 'ordered'}, { 'list': 'bullet' }],\r\n            [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\r\n            [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\r\n            [{ 'direction': 'rtl' }],                         // text direction\r\n        \r\n            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n        \r\n            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\r\n            [{ 'font': [] }],\r\n            [{ 'align': [] }],\r\n        \r\n            ['clean'],                                         // remove formatting button\r\n        \r\n            ['link', 'image', 'video']                         // link and image, video\r\n          ],\r\n        },\r\n        theme: 'snow',\r\n        placeholder: this.placeholder,\r\n      });\r\n\r\n      this.quill.on('text-change', () => {\r\n        this.value = this.quill.root.innerHTML;\r\n        this.characterCount = this.quill.getText().length - 1; // Update character count\r\n      });\r\n    }\r\n  }\r\n\r\n  handleInput(event) {\r\n    if (!this.enable_rich_editor) {\r\n      this.value = event.target.value;\r\n      this.characterCount = event.target.value.length; // Update character count\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const textareaClass = [\r\n      'dda-input-container dda-richtext-editor',\r\n      this.validation_type ? `dda-validation-${this.validation_type}` : '',\r\n      this.input_status ? `dda-input-${this.input_status}` : '',\r\n        this.custom_class, this.component_mode,\r\n    ].filter(Boolean).join(' ');\r\n\r\n    return (\r\n      <Host>\r\n        <div class={textareaClass}>\r\n          {this.label && <label htmlFor={this.input_id} class=\"dda-input-label\">{this.label}</label>}\r\n          {this.enable_rich_editor ? (\r\n            <div id=\"editor\" class=\"dda-richeditor-field\"></div>\r\n          ) : (\r\n            <textarea\r\n              id={this.input_id}\r\n              aria-label={this.aria_label}\r\n              placeholder={this.placeholder}\r\n              value={this.value}\r\n              onInput={(event) => this.handleInput(event)}\r\n              class=\"dda-input-field dda-input-textarea\"\r\n              maxLength={this.max_characters}\r\n            ></textarea>\r\n          )}\r\n          {this.helper_text && (\r\n            <div class=\"dda-helper-text\">\r\n              <span class=\"dda-flex dda-align-center dda-gap-2\"><i class=\"material-icons  material-symbols-outlined\">info</i> {this.helper_text}</span>\r\n              <span class=\"dda-letter-count\">{this.characterCount} / {this.max_characters}</span>\r\n            </div>\r\n          )}\r\n          {this.error_message && (\r\n            <div class=\"dda-error-message\">\r\n              <span class=\"dda-flex dda-align-center dda-gap-2\"><i class=\"material-icons  material-symbols-outlined\">info</i> {this.error_message}</span>\r\n              <span class=\"dda-letter-count\">{this.characterCount} / {this.max_characters}</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}