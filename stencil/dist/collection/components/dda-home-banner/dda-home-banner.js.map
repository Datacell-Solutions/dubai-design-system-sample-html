{"version":3,"file":"dda-home-banner.js","sourceRoot":"","sources":["../../../src/components/dda-home-banner/dda-home-banner.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAOhE,MAAM,OAAO,aAAa;IAL1B;QAMU,WAAM,GAAqE,EAAE,CAAC;QAC9E,aAAQ,GAAY,IAAI,CAAC;QACzB,aAAQ,GAAW,IAAI,CAAC;QAEvB,iBAAY,GAAW,CAAC,CAAC;KAkEnC;IA9DC,gBAAgB;QACd,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;IACH,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,aAAa;QACX,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,GAAG,EAAE;YACpC,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpB,CAAC;IAED,YAAY;QACV,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACpC,CAAC;IAED,SAAS;QACP,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IACnE,CAAC;IAED,SAAS;QACP,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IACxF,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI;YACH,4DAAK,KAAK,EAAC,aAAa;gBACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CACjC,WAAK,KAAK,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,KAAK,IAAI,CAAC,YAAY,EAAE;oBACxE,WAAK,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,UAAU,KAAK,EAAE,GAAI;oBAC/C,WAAK,KAAK,EAAC,gBAAgB;wBACzB,cAAK,KAAK,CAAC,KAAK,CAAM;wBACtB,aAAI,KAAK,CAAC,QAAQ,CAAK;wBACvB,SAAG,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAC,eAAe,iBAAe,CACrD,CACF,CACP,CAAC;gBACF,4DAAK,KAAK,EAAC,YAAY;oBACrB,+DAAQ,KAAK,EAAC,MAAM,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,aAAmB;oBACvE,4DAAK,KAAK,EAAC,aAAa,IACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAC/B,YACI,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,KAAK,IAAI,CAAC,YAAY,EAAE,EACjE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAC/B,CACP,CAAC,CACA;oBACN,+DAAQ,KAAK,EAAC,MAAM,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,aAAmB,CACnE,CACF,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Host, Component, Prop, h, State } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'dda-home-banner',\r\n  styleUrls: ['home-banner.css', '../../global/global.css'],\r\n  shadow: false,\r\n})\r\nexport class DdaHomeBanner {\r\n  @Prop() images: { src: string; title: string; subtitle: string; link: string }[] = [];\r\n  @Prop() autoplay: boolean = true;\r\n  @Prop() interval: number = 3000;\r\n\r\n  @State() currentSlide: number = 0;\r\n\r\n  private slideInterval: any;\r\n\r\n  componentDidLoad() {\r\n    if (this.autoplay) {\r\n      this.startAutoplay();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.stopAutoplay();\r\n  }\r\n\r\n  startAutoplay() {\r\n    this.slideInterval = setInterval(() => {\r\n      this.nextSlide();\r\n    }, this.interval);\r\n  }\r\n\r\n  stopAutoplay() {\r\n    clearInterval(this.slideInterval);\r\n  }\r\n\r\n  nextSlide() {\r\n    this.currentSlide = (this.currentSlide + 1) % this.images.length;\r\n  }\r\n\r\n  prevSlide() {\r\n    this.currentSlide = (this.currentSlide - 1 + this.images.length) % this.images.length;\r\n  }\r\n\r\n  setSlide(index: number) {\r\n    this.currentSlide = index;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class=\"home-slider\">\r\n          {this.images.map((image, index) => (\r\n            <div class={{ 'slider-item': true, 'active': index === this.currentSlide }}>\r\n              <img src={image.src} alt={`banner-${index}`} />\r\n              <div class=\"slider-content\">\r\n                <h2>{image.title}</h2>\r\n                <p>{image.subtitle}</p>\r\n                <a href={image.link} class=\"slider-button\">Learn More</a>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <div class=\"slider-nav\">\r\n            <button class=\"prev\" onClick={() => this.prevSlide()}>&#10094;</button>\r\n            <div class=\"slider-dots\">\r\n                {this.images.map((_, index) => (\r\n                <span \r\n                    class={{ 'dot': true, 'active-dot': index === this.currentSlide }} \r\n                    onClick={() => this.setSlide(index)}\r\n                ></span>\r\n                ))}\r\n            </div>\r\n            <button class=\"next\" onClick={() => this.nextSlide()}>&#10095;</button>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}