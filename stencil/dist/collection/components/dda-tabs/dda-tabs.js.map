{"version":3,"file":"dda-tabs.js","sourceRoot":"","sources":["../../../src/components/dda-tabs/dda-tabs.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AAOrF,MAAM,OAAO,OAAO;IALpB;QAMU,SAAI,GAAyB,MAAM,CAAC;QACpC,gBAAW,GAA2F,iBAAiB,CAAC;QACxH,kBAAa,GAAY,KAAK,CAAC;QAC/B,iBAAY,GAAY,EAAE,CAAC;QAI3B,cAAS,GAAW,6BAA6B,CAAC,CAAC,sBAAsB;QACzE,cAAS,GAAW,uEAAuE,CAAC;QAG5F,eAAU,GAAG,CAAC,KAAK,EAAE,EAAE;YAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC;QAEO,eAAU,GAAW,CAAC,CAAC;KAgDjC;IA9CC,iDAAiD;IACjD,IAAI,UAAU;QACZ,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,iCAAiC;QACtE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YACjD,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,sBAAsB;QAC5D,CAAC;IACH,CAAC;IAED,IAAI,WAAW;QACb,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,iCAAiC;QACtE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;YAChD,OAAO,CAAC,qBAAqB,EAAE,qBAAqB,EAAE,qBAAqB,CAAC,CAAC,CAAC,sBAAsB;QACtG,CAAC;IACH,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI;YACH,4DAAK,KAAK,EAAE,sBAAsB,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,cAAc,EAAE,IAC7F,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CACrC,cACE,EAAE,EAAE,IAAI,CAAC,SAAS,gBACN,IAAI,CAAC,UAAU,EAC3B,IAAI,EAAC,QAAQ,EACb,KAAK,EAAE,gBAAgB,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAClE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;gBAEtC,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,SAAG,KAAK,EAAE,gBAAgB,IAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,CAAK;gBAC7F,gBAAO,KAAK,CAAQ,CACb,CACV,CAAC,CACE,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, State, h, Host, Event, EventEmitter } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'dda-tabs',\r\n  styleUrls: ['dda-tabs.css', '../../global/global.css'],\r\n  shadow: false,\r\n})\r\nexport class DdaTabs {\r\n  @Prop() type: 'text' | 'text-icon' = 'text';\r\n  @Prop() hover_style: 'dda-tab-default' | 'dda-tab-filed' | 'dda-tab-underline' | 'dda-tab-underline-filled' = 'dda-tab-default';\r\n  @Prop() border_bottom: boolean = false;\r\n  @Prop() custom_class?: string = '';\r\n  @Prop() component_mode?: string;\r\n  @Prop() button_id?: string;\r\n  @Prop() aria_label: string;\r\n  @Prop() tab_texts: string = '[\"Tab 1\", \"Tab 2\", \"Tab 3\"]'; // Keep it as a string\r\n  @Prop() tab_icons: string = '[\"sentiment_satisfied\", \"sentiment_satisfied\", \"sentiment_satisfied\"]';\r\n  @Event() tabClick?: EventEmitter<void>;\r\n\r\n  private tabhandler = (index) => {\r\n    this.tabClick.emit(index);\r\n  };\r\n\r\n  @State() active_tab: number = 0;\r\n\r\n  // Parse the stringified array to an actual array\r\n  get parsedTabs() {\r\n    try {\r\n      return JSON.parse(this.tab_texts); // Parse the string into an array\r\n    } catch (error) {\r\n      console.error(\"Error parsing tab_texts:\", error);\r\n      return ['Tab 1', 'Tab 2', 'Tab 3']; // Fallback to default\r\n    }\r\n  }\r\n\r\n  get parsedIcons() {\r\n    try {\r\n      return JSON.parse(this.tab_icons); // Parse the string into an array\r\n    } catch (error) {\r\n      console.error(\"Error parsing tabicons:\", error);\r\n      return [\"sentiment_satisfied\", \"sentiment_satisfied\", \"sentiment_satisfied\"]; // Fallback to default\r\n    }\r\n  }\r\n\r\n  setActiveTab(index: number) {\r\n    this.active_tab = index;\r\n    if (this.tabClick) {\r\n      this.tabhandler(index);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class={`dda-tabs-container ${this.hover_style} ${this.custom_class} ${this.component_mode}`}>\r\n          {this.parsedTabs.map((title, index) => (\r\n            <button\r\n              id={this.button_id}\r\n              aria-label={this.aria_label}\r\n              type=\"button\"\r\n              class={`dda-tab-item ${this.active_tab === index ? 'active' : ''}`}\r\n              onClick={() => this.setActiveTab(index)}\r\n            >\r\n              {this.type === 'text-icon' && <i class={`material-icons`}>{this.parsedIcons[index] || \"\"}</i>}\r\n              <span>{title}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}