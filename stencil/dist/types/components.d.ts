/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface DdaAccordion {
        "accordion_icon": string;
        "body_description": string;
        "component_mode"?: string;
        "custom_class"?: string;
        "design": 'bg-border' | 'no-border';
        "header_text": string;
    }
    interface DdaAlert {
        "button_text": string;
        "clickHandler"?: (event: MouseEvent) => void;
        "component_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "description": string;
        "first_button"?: string;
        "first_link"?: string;
        "second_button"?: string;
        "second_link"?: string;
        "title_text": string;
        "type": 'primary' | 'secondary';
        "variation": 'info' | 'warning' | 'error' | 'success';
    }
    interface DdaAttachFile {
        "aria_label"?: string;
        "button_aria_label"?: string;
        "button_id": string;
        "component_mode"?: string;
        "custom_class"?: string;
        "error_message": string;
        "helper_text": string;
        "input_id": string;
        "input_type"?: string;
        "label": string;
        "size"?: string;
        "validation_type"?: string;
    }
    interface DdaAvatar {
        "aria_label": string;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "design": 'default' | 'status' | 'verified' | 'story' | 'notification';
        "icon": string;
        "notification_number": number;
        "options": string;
        "rounded": 'square' | 'circle';
        "selected": string;
        "size": 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
        "src": string;
        "text": string;
        "type": 'photo' | 'icon' | 'text';
    }
    interface DdaBanner {
        "slider_height": string;
        "slider_width": string;
        "slides": string;
    }
    interface DdaBreadcrumb {
        "component_mode"?: string;
        "custom_class"?: string;
        "design": 'text' | 'icon-text' | 'icon';
        "separator": 'chevron_right' | 'pen_size_2';
    }
    interface DdaButton {
        "aria_label"?: string;
        "button_color": string;
        "button_id": string;
        "button_shape"?: string;
        /**
          * Function to be called on button click
         */
        "clickHandler"?: (event: MouseEvent) => void;
        "component_mode"?: string;
        "custom_class"?: string;
        /**
          * Disable the button
         */
        "disabled": boolean;
        "end_icon": string;
        "gap"?: number;
        "icon_button_shape"?: string;
        "size"?: string;
        /**
          * Icon class for the starting icon
         */
        "start_icon": string;
        /**
          * Type of button, e.g., "button", "submit"
         */
        "type": string;
    }
    interface DdaCheckbox {
        "aria_label"?: string;
        "checkbox_status"?: string;
        "checked": boolean;
        "component_mode"?: string;
        "custom_class"?: string;
        "group_name"?: string;
        "input_id"?: string;
        "size"?: string;
        "style_type"?: string;
        "supporting"?: string;
        "title_text": string;
    }
    interface DdaChip {
        "bg_color": string;
        "clickHandler"?: (event: MouseEvent) => void;
        "component_mode"?: string;
        "custom_class"?: string;
        "icon": string;
        "rounded"?: string;
        "show_close_icon": boolean;
        "size"?: string;
    }
    interface DdaCreditCard {
        "balance": string;
        "card_number": string;
        "card_type": string;
        "component_mode"?: string;
        "custom_class"?: string;
        "design": string;
        "name": string;
    }
    interface DdaCreditcardField {
        "aria_label"?: string;
        "card_icon": string;
        "component_mode"?: string;
        "custom_class"?: string;
        "disabled": boolean;
        "error_message": string;
        "helper_text": string;
        "input_id": string;
        "input_type"?: string;
        "label": string;
        "placeholder": string;
        "restrict_input": boolean;
        "size"?: string;
        "validation_type"?: string;
        "value": string;
    }
    interface DdaDropdown {
        "aria_label"?: string;
        "button_id": string;
        "component_mode"?: string;
        "custom_class"?: string;
        "disabled": boolean;
        "error": string;
        "helper_text": string;
        "icon_mode": boolean;
        "label": string;
        "options": string;
        "selected": string;
        "size": 'small' | 'medium';
        "type": 'bg-transparent' | 'bg-white';
    }
    interface DdaFooter {
        "copyrightText": string;
        "description": string;
        "footerSections": string;
        "footerTitle": string;
        "loginButtonText": string;
        "logoAlt": string;
        "logoSrc": string;
        "signUpButtonText": string;
        "socialIcons": string;
    }
    interface DdaHeader {
        "firstLogoAlt": string;
        "firstLogoSrc": string;
        "firstLogoWhiteSrc": string;
        "loginLink": string;
        "quickLinks": string;
        "readSpeakerLink": string;
        "secondLogoAlt": string;
        "secondLogoSrc": string;
        "secondLogoWhiteSrc": string;
        "sideMenuItems": string;
    }
    interface DdaHomeBanner {
        "autoplay": boolean;
        "images": { src: string; title: string; subtitle: string; link: string }[];
        "interval": number;
    }
    interface DdaHorizontalStepper {
        "component_mode"?: string;
        "current_step": number;
        "custom_class"?: string;
        "steps": string;
    }
    interface DdaInput {
        "aria_label"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "error_message": string;
        "helper_text": string;
        "input_id": string;
        "input_status"?: string;
        "label": string;
        "placeholder": string;
        "size"?: string;
        "type": string;
        "validation_type"?: string;
        "value": string;
    }
    interface DdaLinkButton {
        "aria_label"?: string;
        "button_color": string;
        "button_id": string;
        "button_shape"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        /**
          * Disable the button
         */
        "disabled": boolean;
        "end_icon": string;
        "gap"?: number;
        "href"?: string;
        "icon_button_shape"?: string;
        "size"?: string;
        /**
          * Icon class for the starting icon
         */
        "start_icon": string;
        /**
          * Type of button, e.g., "button", "submit"
         */
        "type": string;
    }
    interface DdaNumberField {
        "aria_label"?: string;
        "component_mode"?: string;
        "currencies": string;
        "custom_class"?: string;
        "error_message": string;
        "helper_text": string;
        "input_id": string;
        "input_status"?: string;
        "label": string;
        "placeholder": string;
        "selected_currency": string;
        "size"?: string;
        "validation_type"?: string;
        "value": string;
    }
    interface DdaPagination {
        "component_mode"?: string;
        "current_page": number;
        "custom_class": string;
        "total_pages": number;
        "type": 'simple-slider' | 'buttons' | 'text' | 'text-pages' | 'button-text' | 'buttons-pages' | 'full';
    }
    interface DdaPhonefield {
        "aria_label": string;
        "button_aria_label": string;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class": string;
        "disabled": boolean;
        "error_message": string;
        "helper_text": string;
        "input_id"?: string;
        "label": string;
        "placeholder": string;
        "size"?: string;
        "validation_type"?: string;
    }
    interface DdaProgressbar {
        "component_mode"?: string;
        "custom_class": string;
        "progress": number;
        "show_percentage_text": boolean;
        "tooltip": boolean;
        "tooltip_position": 'top' | 'bottom';
    }
    interface DdaRadiobutton {
        "aria_label"?: string;
        "checked": boolean;
        "component_mode"?: string;
        "custom_class"?: string;
        "group_name"?: string;
        "input_id"?: string;
        "radio_status"?: string;
        "size"?: string;
        "supporting"?: string;
        "title_text": string;
        "variants"?: string;
    }
    interface DdaRangeSlider {
        "component_mode"?: string;
        "custom_class"?: string;
        "initial_max": number;
        "initial_min": number;
        "left_aria_label"?: string;
        "left_input_id": string;
        "max": number;
        "min": number;
        "right_aria_label"?: string;
        "right_input_id": string;
        "size"?: string;
        "step": number;
        "tooltip_position"?: string;
    }
    interface DdaSearchInput {
        "aria_label"?: string;
        "button_aria_label"?: string;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "error_message": string;
        "has_error": boolean;
        "helper_text": string;
        "input_status"?: string;
        "label": string;
        "placeholder": string;
        "show_button": boolean;
        "size": string;
    }
    interface DdaSegmentedTabs {
        "component_mode"?: string;
        "custom_class": string;
        "items": string;
        "radius_type": string;
    }
    interface DdaSelect {
        "aria_label"?: string;
        "button_id": string;
        "component_mode"?: string;
        "custom_class"?: string;
        "disabled": boolean;
        "error"?: string;
        "error_message": string;
        "helper_text": string;
        "label": string;
        "options": string;
        "selected": string;
        "size"?: string;
    }
    interface DdaStickyFooter {
        "accessibilityIconAlt": string;
        "accessibilityIconHref": string;
        "accessibilityIconSrc": string;
        "accessibilityIconTooltip": string;
        "aiIconAlt": string;
        "aiIconHref": string;
        "aiIconSrc": string;
        "aiIconTooltip": string;
        "chatIconAlt": string;
        "chatIconHref": string;
        "chatIconSrc": string;
        "chatIconTooltip": string;
        "firstLogoAlt": string;
        /**
          * Middle Section Props
         */
        "firstLogoHref": string;
        "firstLogoSrc": string;
        "firstLogoTooltip": string;
        "happinessIconAlt": string;
        /**
          * Left Section Props
         */
        "happinessIconHref": string;
        "happinessIconSrc": string;
        "happinessIconTooltip": string;
        /**
          * Right Section Props
         */
        "locationButtonHref": string;
        "locationButtonIcon": string;
        "locationButtonText": string;
        "newsButtonHref": string;
        "newsButtonIcon": string;
        "newsButtonText": string;
        "secondLogoAlt": string;
        "secondLogoHref": string;
        "secondLogoSrc": string;
        "secondLogoTooltip": string;
        "servicesIconAlt": string;
        "servicesIconHref": string;
        "servicesIconSrc": string;
        "servicesIconText": string;
        "servicesIconTooltip": string;
        "thirdLogoAlt": string;
        "thirdLogoHref": string;
        "thirdLogoSrc": string;
        "thirdLogoTooltip": string;
    }
    interface DdaTabs {
        "aria_label": string;
        "border_bottom": boolean;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "hover_style": 'dda-tab-default' | 'dda-tab-filed' | 'dda-tab-underline' | 'dda-tab-underline-filled';
        "tab_icons": string;
        "tab_texts": string;
        "type": 'text' | 'text-icon';
    }
    interface DdaTextarea {
        "aria_label"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "enable_rich_editor"?: boolean;
        "error_message": string;
        "helper_text"?: string;
        "input_id": string;
        "input_status"?: string;
        "label": string;
        "max_characters": number;
        "placeholder": string;
        "validation_type"?: string;
        "value": string;
    }
    interface DdaToggle {
        "aria_label": string;
        "checked": boolean;
        "component_mode"?: string;
        "custom_class"?: string;
        "group_name"?: string;
        "input_id"?: string;
        "size"?: string;
    }
    interface DdaTooltip {
        "component_mode"?: string;
        "custom_class"?: string;
        "description": string;
        "position": 'top' | 'bottom' | 'left' | 'right';
        "title_text": string;
    }
    interface DdaVerticalStepper {
        "component_mode"?: string;
        "current_Step": number;
        "custom_class"?: string;
        "steps": string;
    }
}
export interface DdaAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdaAlertElement;
}
export interface DdaHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdaHeaderElement;
}
export interface DdaTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdaTabsElement;
}
declare global {
    interface HTMLDdaAccordionElement extends Components.DdaAccordion, HTMLStencilElement {
    }
    var HTMLDdaAccordionElement: {
        prototype: HTMLDdaAccordionElement;
        new (): HTMLDdaAccordionElement;
    };
    interface HTMLDdaAlertElementEventMap {
        "firstClick": void;
        "secondClick": void;
    }
    interface HTMLDdaAlertElement extends Components.DdaAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDdaAlertElementEventMap>(type: K, listener: (this: HTMLDdaAlertElement, ev: DdaAlertCustomEvent<HTMLDdaAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDdaAlertElementEventMap>(type: K, listener: (this: HTMLDdaAlertElement, ev: DdaAlertCustomEvent<HTMLDdaAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDdaAlertElement: {
        prototype: HTMLDdaAlertElement;
        new (): HTMLDdaAlertElement;
    };
    interface HTMLDdaAttachFileElement extends Components.DdaAttachFile, HTMLStencilElement {
    }
    var HTMLDdaAttachFileElement: {
        prototype: HTMLDdaAttachFileElement;
        new (): HTMLDdaAttachFileElement;
    };
    interface HTMLDdaAvatarElement extends Components.DdaAvatar, HTMLStencilElement {
    }
    var HTMLDdaAvatarElement: {
        prototype: HTMLDdaAvatarElement;
        new (): HTMLDdaAvatarElement;
    };
    interface HTMLDdaBannerElement extends Components.DdaBanner, HTMLStencilElement {
    }
    var HTMLDdaBannerElement: {
        prototype: HTMLDdaBannerElement;
        new (): HTMLDdaBannerElement;
    };
    interface HTMLDdaBreadcrumbElement extends Components.DdaBreadcrumb, HTMLStencilElement {
    }
    var HTMLDdaBreadcrumbElement: {
        prototype: HTMLDdaBreadcrumbElement;
        new (): HTMLDdaBreadcrumbElement;
    };
    interface HTMLDdaButtonElement extends Components.DdaButton, HTMLStencilElement {
    }
    var HTMLDdaButtonElement: {
        prototype: HTMLDdaButtonElement;
        new (): HTMLDdaButtonElement;
    };
    interface HTMLDdaCheckboxElement extends Components.DdaCheckbox, HTMLStencilElement {
    }
    var HTMLDdaCheckboxElement: {
        prototype: HTMLDdaCheckboxElement;
        new (): HTMLDdaCheckboxElement;
    };
    interface HTMLDdaChipElement extends Components.DdaChip, HTMLStencilElement {
    }
    var HTMLDdaChipElement: {
        prototype: HTMLDdaChipElement;
        new (): HTMLDdaChipElement;
    };
    interface HTMLDdaCreditCardElement extends Components.DdaCreditCard, HTMLStencilElement {
    }
    var HTMLDdaCreditCardElement: {
        prototype: HTMLDdaCreditCardElement;
        new (): HTMLDdaCreditCardElement;
    };
    interface HTMLDdaCreditcardFieldElement extends Components.DdaCreditcardField, HTMLStencilElement {
    }
    var HTMLDdaCreditcardFieldElement: {
        prototype: HTMLDdaCreditcardFieldElement;
        new (): HTMLDdaCreditcardFieldElement;
    };
    interface HTMLDdaDropdownElement extends Components.DdaDropdown, HTMLStencilElement {
    }
    var HTMLDdaDropdownElement: {
        prototype: HTMLDdaDropdownElement;
        new (): HTMLDdaDropdownElement;
    };
    interface HTMLDdaFooterElement extends Components.DdaFooter, HTMLStencilElement {
    }
    var HTMLDdaFooterElement: {
        prototype: HTMLDdaFooterElement;
        new (): HTMLDdaFooterElement;
    };
    interface HTMLDdaHeaderElementEventMap {
        "languageSwitch": void;
        "smTextSize": void;
        "baseTextSize": void;
        "lgTextSize": void;
        "normalContrast": void;
        "blindContrast": void;
        "redContrast": void;
        "greenContrast": void;
    }
    interface HTMLDdaHeaderElement extends Components.DdaHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDdaHeaderElementEventMap>(type: K, listener: (this: HTMLDdaHeaderElement, ev: DdaHeaderCustomEvent<HTMLDdaHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDdaHeaderElementEventMap>(type: K, listener: (this: HTMLDdaHeaderElement, ev: DdaHeaderCustomEvent<HTMLDdaHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDdaHeaderElement: {
        prototype: HTMLDdaHeaderElement;
        new (): HTMLDdaHeaderElement;
    };
    interface HTMLDdaHomeBannerElement extends Components.DdaHomeBanner, HTMLStencilElement {
    }
    var HTMLDdaHomeBannerElement: {
        prototype: HTMLDdaHomeBannerElement;
        new (): HTMLDdaHomeBannerElement;
    };
    interface HTMLDdaHorizontalStepperElement extends Components.DdaHorizontalStepper, HTMLStencilElement {
    }
    var HTMLDdaHorizontalStepperElement: {
        prototype: HTMLDdaHorizontalStepperElement;
        new (): HTMLDdaHorizontalStepperElement;
    };
    interface HTMLDdaInputElement extends Components.DdaInput, HTMLStencilElement {
    }
    var HTMLDdaInputElement: {
        prototype: HTMLDdaInputElement;
        new (): HTMLDdaInputElement;
    };
    interface HTMLDdaLinkButtonElement extends Components.DdaLinkButton, HTMLStencilElement {
    }
    var HTMLDdaLinkButtonElement: {
        prototype: HTMLDdaLinkButtonElement;
        new (): HTMLDdaLinkButtonElement;
    };
    interface HTMLDdaNumberFieldElement extends Components.DdaNumberField, HTMLStencilElement {
    }
    var HTMLDdaNumberFieldElement: {
        prototype: HTMLDdaNumberFieldElement;
        new (): HTMLDdaNumberFieldElement;
    };
    interface HTMLDdaPaginationElement extends Components.DdaPagination, HTMLStencilElement {
    }
    var HTMLDdaPaginationElement: {
        prototype: HTMLDdaPaginationElement;
        new (): HTMLDdaPaginationElement;
    };
    interface HTMLDdaPhonefieldElement extends Components.DdaPhonefield, HTMLStencilElement {
    }
    var HTMLDdaPhonefieldElement: {
        prototype: HTMLDdaPhonefieldElement;
        new (): HTMLDdaPhonefieldElement;
    };
    interface HTMLDdaProgressbarElement extends Components.DdaProgressbar, HTMLStencilElement {
    }
    var HTMLDdaProgressbarElement: {
        prototype: HTMLDdaProgressbarElement;
        new (): HTMLDdaProgressbarElement;
    };
    interface HTMLDdaRadiobuttonElement extends Components.DdaRadiobutton, HTMLStencilElement {
    }
    var HTMLDdaRadiobuttonElement: {
        prototype: HTMLDdaRadiobuttonElement;
        new (): HTMLDdaRadiobuttonElement;
    };
    interface HTMLDdaRangeSliderElement extends Components.DdaRangeSlider, HTMLStencilElement {
    }
    var HTMLDdaRangeSliderElement: {
        prototype: HTMLDdaRangeSliderElement;
        new (): HTMLDdaRangeSliderElement;
    };
    interface HTMLDdaSearchInputElement extends Components.DdaSearchInput, HTMLStencilElement {
    }
    var HTMLDdaSearchInputElement: {
        prototype: HTMLDdaSearchInputElement;
        new (): HTMLDdaSearchInputElement;
    };
    interface HTMLDdaSegmentedTabsElement extends Components.DdaSegmentedTabs, HTMLStencilElement {
    }
    var HTMLDdaSegmentedTabsElement: {
        prototype: HTMLDdaSegmentedTabsElement;
        new (): HTMLDdaSegmentedTabsElement;
    };
    interface HTMLDdaSelectElement extends Components.DdaSelect, HTMLStencilElement {
    }
    var HTMLDdaSelectElement: {
        prototype: HTMLDdaSelectElement;
        new (): HTMLDdaSelectElement;
    };
    interface HTMLDdaStickyFooterElement extends Components.DdaStickyFooter, HTMLStencilElement {
    }
    var HTMLDdaStickyFooterElement: {
        prototype: HTMLDdaStickyFooterElement;
        new (): HTMLDdaStickyFooterElement;
    };
    interface HTMLDdaTabsElementEventMap {
        "tabClick": void;
    }
    interface HTMLDdaTabsElement extends Components.DdaTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDdaTabsElementEventMap>(type: K, listener: (this: HTMLDdaTabsElement, ev: DdaTabsCustomEvent<HTMLDdaTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDdaTabsElementEventMap>(type: K, listener: (this: HTMLDdaTabsElement, ev: DdaTabsCustomEvent<HTMLDdaTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDdaTabsElement: {
        prototype: HTMLDdaTabsElement;
        new (): HTMLDdaTabsElement;
    };
    interface HTMLDdaTextareaElement extends Components.DdaTextarea, HTMLStencilElement {
    }
    var HTMLDdaTextareaElement: {
        prototype: HTMLDdaTextareaElement;
        new (): HTMLDdaTextareaElement;
    };
    interface HTMLDdaToggleElement extends Components.DdaToggle, HTMLStencilElement {
    }
    var HTMLDdaToggleElement: {
        prototype: HTMLDdaToggleElement;
        new (): HTMLDdaToggleElement;
    };
    interface HTMLDdaTooltipElement extends Components.DdaTooltip, HTMLStencilElement {
    }
    var HTMLDdaTooltipElement: {
        prototype: HTMLDdaTooltipElement;
        new (): HTMLDdaTooltipElement;
    };
    interface HTMLDdaVerticalStepperElement extends Components.DdaVerticalStepper, HTMLStencilElement {
    }
    var HTMLDdaVerticalStepperElement: {
        prototype: HTMLDdaVerticalStepperElement;
        new (): HTMLDdaVerticalStepperElement;
    };
    interface HTMLElementTagNameMap {
        "dda-accordion": HTMLDdaAccordionElement;
        "dda-alert": HTMLDdaAlertElement;
        "dda-attach-file": HTMLDdaAttachFileElement;
        "dda-avatar": HTMLDdaAvatarElement;
        "dda-banner": HTMLDdaBannerElement;
        "dda-breadcrumb": HTMLDdaBreadcrumbElement;
        "dda-button": HTMLDdaButtonElement;
        "dda-checkbox": HTMLDdaCheckboxElement;
        "dda-chip": HTMLDdaChipElement;
        "dda-credit-card": HTMLDdaCreditCardElement;
        "dda-creditcard-field": HTMLDdaCreditcardFieldElement;
        "dda-dropdown": HTMLDdaDropdownElement;
        "dda-footer": HTMLDdaFooterElement;
        "dda-header": HTMLDdaHeaderElement;
        "dda-home-banner": HTMLDdaHomeBannerElement;
        "dda-horizontal-stepper": HTMLDdaHorizontalStepperElement;
        "dda-input": HTMLDdaInputElement;
        "dda-link-button": HTMLDdaLinkButtonElement;
        "dda-number-field": HTMLDdaNumberFieldElement;
        "dda-pagination": HTMLDdaPaginationElement;
        "dda-phonefield": HTMLDdaPhonefieldElement;
        "dda-progressbar": HTMLDdaProgressbarElement;
        "dda-radiobutton": HTMLDdaRadiobuttonElement;
        "dda-range-slider": HTMLDdaRangeSliderElement;
        "dda-search-input": HTMLDdaSearchInputElement;
        "dda-segmented-tabs": HTMLDdaSegmentedTabsElement;
        "dda-select": HTMLDdaSelectElement;
        "dda-sticky-footer": HTMLDdaStickyFooterElement;
        "dda-tabs": HTMLDdaTabsElement;
        "dda-textarea": HTMLDdaTextareaElement;
        "dda-toggle": HTMLDdaToggleElement;
        "dda-tooltip": HTMLDdaTooltipElement;
        "dda-vertical-stepper": HTMLDdaVerticalStepperElement;
    }
}
declare namespace LocalJSX {
    interface DdaAccordion {
        "accordion_icon"?: string;
        "body_description"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "design"?: 'bg-border' | 'no-border';
        "header_text"?: string;
    }
    interface DdaAlert {
        "button_text"?: string;
        "clickHandler"?: (event: MouseEvent) => void;
        "component_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "description"?: string;
        "first_button"?: string;
        "first_link"?: string;
        "onFirstClick"?: (event: DdaAlertCustomEvent<void>) => void;
        "onSecondClick"?: (event: DdaAlertCustomEvent<void>) => void;
        "second_button"?: string;
        "second_link"?: string;
        "title_text"?: string;
        "type"?: 'primary' | 'secondary';
        "variation"?: 'info' | 'warning' | 'error' | 'success';
    }
    interface DdaAttachFile {
        "aria_label"?: string;
        "button_aria_label"?: string;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "error_message"?: string;
        "helper_text"?: string;
        "input_id"?: string;
        "input_type"?: string;
        "label"?: string;
        "size"?: string;
        "validation_type"?: string;
    }
    interface DdaAvatar {
        "aria_label"?: string;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "design"?: 'default' | 'status' | 'verified' | 'story' | 'notification';
        "icon"?: string;
        "notification_number"?: number;
        "options"?: string;
        "rounded"?: 'square' | 'circle';
        "selected"?: string;
        "size"?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
        "src"?: string;
        "text"?: string;
        "type"?: 'photo' | 'icon' | 'text';
    }
    interface DdaBanner {
        "slider_height"?: string;
        "slider_width"?: string;
        "slides"?: string;
    }
    interface DdaBreadcrumb {
        "component_mode"?: string;
        "custom_class"?: string;
        "design"?: 'text' | 'icon-text' | 'icon';
        "separator"?: 'chevron_right' | 'pen_size_2';
    }
    interface DdaButton {
        "aria_label"?: string;
        "button_color"?: string;
        "button_id"?: string;
        "button_shape"?: string;
        /**
          * Function to be called on button click
         */
        "clickHandler"?: (event: MouseEvent) => void;
        "component_mode"?: string;
        "custom_class"?: string;
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        "end_icon"?: string;
        "gap"?: number;
        "icon_button_shape"?: string;
        "size"?: string;
        /**
          * Icon class for the starting icon
         */
        "start_icon"?: string;
        /**
          * Type of button, e.g., "button", "submit"
         */
        "type"?: string;
    }
    interface DdaCheckbox {
        "aria_label"?: string;
        "checkbox_status"?: string;
        "checked"?: boolean;
        "component_mode"?: string;
        "custom_class"?: string;
        "group_name"?: string;
        "input_id"?: string;
        "size"?: string;
        "style_type"?: string;
        "supporting"?: string;
        "title_text"?: string;
    }
    interface DdaChip {
        "bg_color"?: string;
        "clickHandler"?: (event: MouseEvent) => void;
        "component_mode"?: string;
        "custom_class"?: string;
        "icon"?: string;
        "rounded"?: string;
        "show_close_icon"?: boolean;
        "size"?: string;
    }
    interface DdaCreditCard {
        "balance"?: string;
        "card_number"?: string;
        "card_type"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "design"?: string;
        "name"?: string;
    }
    interface DdaCreditcardField {
        "aria_label"?: string;
        "card_icon"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "disabled"?: boolean;
        "error_message"?: string;
        "helper_text"?: string;
        "input_id"?: string;
        "input_type"?: string;
        "label"?: string;
        "placeholder"?: string;
        "restrict_input"?: boolean;
        "size"?: string;
        "validation_type"?: string;
        "value"?: string;
    }
    interface DdaDropdown {
        "aria_label"?: string;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "disabled"?: boolean;
        "error"?: string;
        "helper_text"?: string;
        "icon_mode"?: boolean;
        "label"?: string;
        "options"?: string;
        "selected"?: string;
        "size"?: 'small' | 'medium';
        "type"?: 'bg-transparent' | 'bg-white';
    }
    interface DdaFooter {
        "copyrightText"?: string;
        "description"?: string;
        "footerSections"?: string;
        "footerTitle"?: string;
        "loginButtonText"?: string;
        "logoAlt"?: string;
        "logoSrc"?: string;
        "signUpButtonText"?: string;
        "socialIcons"?: string;
    }
    interface DdaHeader {
        "firstLogoAlt"?: string;
        "firstLogoSrc"?: string;
        "firstLogoWhiteSrc"?: string;
        "loginLink"?: string;
        "onBaseTextSize"?: (event: DdaHeaderCustomEvent<void>) => void;
        "onBlindContrast"?: (event: DdaHeaderCustomEvent<void>) => void;
        "onGreenContrast"?: (event: DdaHeaderCustomEvent<void>) => void;
        "onLanguageSwitch"?: (event: DdaHeaderCustomEvent<void>) => void;
        "onLgTextSize"?: (event: DdaHeaderCustomEvent<void>) => void;
        "onNormalContrast"?: (event: DdaHeaderCustomEvent<void>) => void;
        "onRedContrast"?: (event: DdaHeaderCustomEvent<void>) => void;
        "onSmTextSize"?: (event: DdaHeaderCustomEvent<void>) => void;
        "quickLinks"?: string;
        "readSpeakerLink"?: string;
        "secondLogoAlt"?: string;
        "secondLogoSrc"?: string;
        "secondLogoWhiteSrc"?: string;
        "sideMenuItems"?: string;
    }
    interface DdaHomeBanner {
        "autoplay"?: boolean;
        "images"?: { src: string; title: string; subtitle: string; link: string }[];
        "interval"?: number;
    }
    interface DdaHorizontalStepper {
        "component_mode"?: string;
        "current_step"?: number;
        "custom_class"?: string;
        "steps"?: string;
    }
    interface DdaInput {
        "aria_label"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "error_message"?: string;
        "helper_text"?: string;
        "input_id"?: string;
        "input_status"?: string;
        "label"?: string;
        "placeholder"?: string;
        "size"?: string;
        "type"?: string;
        "validation_type"?: string;
        "value"?: string;
    }
    interface DdaLinkButton {
        "aria_label"?: string;
        "button_color"?: string;
        "button_id"?: string;
        "button_shape"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        "end_icon"?: string;
        "gap"?: number;
        "href"?: string;
        "icon_button_shape"?: string;
        "size"?: string;
        /**
          * Icon class for the starting icon
         */
        "start_icon"?: string;
        /**
          * Type of button, e.g., "button", "submit"
         */
        "type"?: string;
    }
    interface DdaNumberField {
        "aria_label"?: string;
        "component_mode"?: string;
        "currencies"?: string;
        "custom_class"?: string;
        "error_message"?: string;
        "helper_text"?: string;
        "input_id"?: string;
        "input_status"?: string;
        "label"?: string;
        "placeholder"?: string;
        "selected_currency"?: string;
        "size"?: string;
        "validation_type"?: string;
        "value"?: string;
    }
    interface DdaPagination {
        "component_mode"?: string;
        "current_page"?: number;
        "custom_class"?: string;
        "total_pages"?: number;
        "type"?: 'simple-slider' | 'buttons' | 'text' | 'text-pages' | 'button-text' | 'buttons-pages' | 'full';
    }
    interface DdaPhonefield {
        "aria_label"?: string;
        "button_aria_label"?: string;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "disabled"?: boolean;
        "error_message"?: string;
        "helper_text"?: string;
        "input_id"?: string;
        "label"?: string;
        "placeholder"?: string;
        "size"?: string;
        "validation_type"?: string;
    }
    interface DdaProgressbar {
        "component_mode"?: string;
        "custom_class"?: string;
        "progress"?: number;
        "show_percentage_text"?: boolean;
        "tooltip"?: boolean;
        "tooltip_position"?: 'top' | 'bottom';
    }
    interface DdaRadiobutton {
        "aria_label"?: string;
        "checked"?: boolean;
        "component_mode"?: string;
        "custom_class"?: string;
        "group_name"?: string;
        "input_id"?: string;
        "radio_status"?: string;
        "size"?: string;
        "supporting"?: string;
        "title_text"?: string;
        "variants"?: string;
    }
    interface DdaRangeSlider {
        "component_mode"?: string;
        "custom_class"?: string;
        "initial_max"?: number;
        "initial_min"?: number;
        "left_aria_label"?: string;
        "left_input_id"?: string;
        "max"?: number;
        "min"?: number;
        "right_aria_label"?: string;
        "right_input_id"?: string;
        "size"?: string;
        "step"?: number;
        "tooltip_position"?: string;
    }
    interface DdaSearchInput {
        "aria_label"?: string;
        "button_aria_label"?: string;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "error_message"?: string;
        "has_error"?: boolean;
        "helper_text"?: string;
        "input_status"?: string;
        "label"?: string;
        "placeholder"?: string;
        "show_button"?: boolean;
        "size"?: string;
    }
    interface DdaSegmentedTabs {
        "component_mode"?: string;
        "custom_class"?: string;
        "items"?: string;
        "radius_type"?: string;
    }
    interface DdaSelect {
        "aria_label"?: string;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "disabled"?: boolean;
        "error"?: string;
        "error_message"?: string;
        "helper_text"?: string;
        "label"?: string;
        "options"?: string;
        "selected"?: string;
        "size"?: string;
    }
    interface DdaStickyFooter {
        "accessibilityIconAlt"?: string;
        "accessibilityIconHref"?: string;
        "accessibilityIconSrc"?: string;
        "accessibilityIconTooltip"?: string;
        "aiIconAlt"?: string;
        "aiIconHref"?: string;
        "aiIconSrc"?: string;
        "aiIconTooltip"?: string;
        "chatIconAlt"?: string;
        "chatIconHref"?: string;
        "chatIconSrc"?: string;
        "chatIconTooltip"?: string;
        "firstLogoAlt"?: string;
        /**
          * Middle Section Props
         */
        "firstLogoHref"?: string;
        "firstLogoSrc"?: string;
        "firstLogoTooltip"?: string;
        "happinessIconAlt"?: string;
        /**
          * Left Section Props
         */
        "happinessIconHref"?: string;
        "happinessIconSrc"?: string;
        "happinessIconTooltip"?: string;
        /**
          * Right Section Props
         */
        "locationButtonHref"?: string;
        "locationButtonIcon"?: string;
        "locationButtonText"?: string;
        "newsButtonHref"?: string;
        "newsButtonIcon"?: string;
        "newsButtonText"?: string;
        "secondLogoAlt"?: string;
        "secondLogoHref"?: string;
        "secondLogoSrc"?: string;
        "secondLogoTooltip"?: string;
        "servicesIconAlt"?: string;
        "servicesIconHref"?: string;
        "servicesIconSrc"?: string;
        "servicesIconText"?: string;
        "servicesIconTooltip"?: string;
        "thirdLogoAlt"?: string;
        "thirdLogoHref"?: string;
        "thirdLogoSrc"?: string;
        "thirdLogoTooltip"?: string;
    }
    interface DdaTabs {
        "aria_label"?: string;
        "border_bottom"?: boolean;
        "button_id"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "hover_style"?: 'dda-tab-default' | 'dda-tab-filed' | 'dda-tab-underline' | 'dda-tab-underline-filled';
        "onTabClick"?: (event: DdaTabsCustomEvent<void>) => void;
        "tab_icons"?: string;
        "tab_texts"?: string;
        "type"?: 'text' | 'text-icon';
    }
    interface DdaTextarea {
        "aria_label"?: string;
        "component_mode"?: string;
        "custom_class"?: string;
        "enable_rich_editor"?: boolean;
        "error_message"?: string;
        "helper_text"?: string;
        "input_id"?: string;
        "input_status"?: string;
        "label"?: string;
        "max_characters"?: number;
        "placeholder"?: string;
        "validation_type"?: string;
        "value"?: string;
    }
    interface DdaToggle {
        "aria_label"?: string;
        "checked"?: boolean;
        "component_mode"?: string;
        "custom_class"?: string;
        "group_name"?: string;
        "input_id"?: string;
        "size"?: string;
    }
    interface DdaTooltip {
        "component_mode"?: string;
        "custom_class"?: string;
        "description"?: string;
        "position"?: 'top' | 'bottom' | 'left' | 'right';
        "title_text"?: string;
    }
    interface DdaVerticalStepper {
        "component_mode"?: string;
        "current_Step"?: number;
        "custom_class"?: string;
        "steps"?: string;
    }
    interface IntrinsicElements {
        "dda-accordion": DdaAccordion;
        "dda-alert": DdaAlert;
        "dda-attach-file": DdaAttachFile;
        "dda-avatar": DdaAvatar;
        "dda-banner": DdaBanner;
        "dda-breadcrumb": DdaBreadcrumb;
        "dda-button": DdaButton;
        "dda-checkbox": DdaCheckbox;
        "dda-chip": DdaChip;
        "dda-credit-card": DdaCreditCard;
        "dda-creditcard-field": DdaCreditcardField;
        "dda-dropdown": DdaDropdown;
        "dda-footer": DdaFooter;
        "dda-header": DdaHeader;
        "dda-home-banner": DdaHomeBanner;
        "dda-horizontal-stepper": DdaHorizontalStepper;
        "dda-input": DdaInput;
        "dda-link-button": DdaLinkButton;
        "dda-number-field": DdaNumberField;
        "dda-pagination": DdaPagination;
        "dda-phonefield": DdaPhonefield;
        "dda-progressbar": DdaProgressbar;
        "dda-radiobutton": DdaRadiobutton;
        "dda-range-slider": DdaRangeSlider;
        "dda-search-input": DdaSearchInput;
        "dda-segmented-tabs": DdaSegmentedTabs;
        "dda-select": DdaSelect;
        "dda-sticky-footer": DdaStickyFooter;
        "dda-tabs": DdaTabs;
        "dda-textarea": DdaTextarea;
        "dda-toggle": DdaToggle;
        "dda-tooltip": DdaTooltip;
        "dda-vertical-stepper": DdaVerticalStepper;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dda-accordion": LocalJSX.DdaAccordion & JSXBase.HTMLAttributes<HTMLDdaAccordionElement>;
            "dda-alert": LocalJSX.DdaAlert & JSXBase.HTMLAttributes<HTMLDdaAlertElement>;
            "dda-attach-file": LocalJSX.DdaAttachFile & JSXBase.HTMLAttributes<HTMLDdaAttachFileElement>;
            "dda-avatar": LocalJSX.DdaAvatar & JSXBase.HTMLAttributes<HTMLDdaAvatarElement>;
            "dda-banner": LocalJSX.DdaBanner & JSXBase.HTMLAttributes<HTMLDdaBannerElement>;
            "dda-breadcrumb": LocalJSX.DdaBreadcrumb & JSXBase.HTMLAttributes<HTMLDdaBreadcrumbElement>;
            "dda-button": LocalJSX.DdaButton & JSXBase.HTMLAttributes<HTMLDdaButtonElement>;
            "dda-checkbox": LocalJSX.DdaCheckbox & JSXBase.HTMLAttributes<HTMLDdaCheckboxElement>;
            "dda-chip": LocalJSX.DdaChip & JSXBase.HTMLAttributes<HTMLDdaChipElement>;
            "dda-credit-card": LocalJSX.DdaCreditCard & JSXBase.HTMLAttributes<HTMLDdaCreditCardElement>;
            "dda-creditcard-field": LocalJSX.DdaCreditcardField & JSXBase.HTMLAttributes<HTMLDdaCreditcardFieldElement>;
            "dda-dropdown": LocalJSX.DdaDropdown & JSXBase.HTMLAttributes<HTMLDdaDropdownElement>;
            "dda-footer": LocalJSX.DdaFooter & JSXBase.HTMLAttributes<HTMLDdaFooterElement>;
            "dda-header": LocalJSX.DdaHeader & JSXBase.HTMLAttributes<HTMLDdaHeaderElement>;
            "dda-home-banner": LocalJSX.DdaHomeBanner & JSXBase.HTMLAttributes<HTMLDdaHomeBannerElement>;
            "dda-horizontal-stepper": LocalJSX.DdaHorizontalStepper & JSXBase.HTMLAttributes<HTMLDdaHorizontalStepperElement>;
            "dda-input": LocalJSX.DdaInput & JSXBase.HTMLAttributes<HTMLDdaInputElement>;
            "dda-link-button": LocalJSX.DdaLinkButton & JSXBase.HTMLAttributes<HTMLDdaLinkButtonElement>;
            "dda-number-field": LocalJSX.DdaNumberField & JSXBase.HTMLAttributes<HTMLDdaNumberFieldElement>;
            "dda-pagination": LocalJSX.DdaPagination & JSXBase.HTMLAttributes<HTMLDdaPaginationElement>;
            "dda-phonefield": LocalJSX.DdaPhonefield & JSXBase.HTMLAttributes<HTMLDdaPhonefieldElement>;
            "dda-progressbar": LocalJSX.DdaProgressbar & JSXBase.HTMLAttributes<HTMLDdaProgressbarElement>;
            "dda-radiobutton": LocalJSX.DdaRadiobutton & JSXBase.HTMLAttributes<HTMLDdaRadiobuttonElement>;
            "dda-range-slider": LocalJSX.DdaRangeSlider & JSXBase.HTMLAttributes<HTMLDdaRangeSliderElement>;
            "dda-search-input": LocalJSX.DdaSearchInput & JSXBase.HTMLAttributes<HTMLDdaSearchInputElement>;
            "dda-segmented-tabs": LocalJSX.DdaSegmentedTabs & JSXBase.HTMLAttributes<HTMLDdaSegmentedTabsElement>;
            "dda-select": LocalJSX.DdaSelect & JSXBase.HTMLAttributes<HTMLDdaSelectElement>;
            "dda-sticky-footer": LocalJSX.DdaStickyFooter & JSXBase.HTMLAttributes<HTMLDdaStickyFooterElement>;
            "dda-tabs": LocalJSX.DdaTabs & JSXBase.HTMLAttributes<HTMLDdaTabsElement>;
            "dda-textarea": LocalJSX.DdaTextarea & JSXBase.HTMLAttributes<HTMLDdaTextareaElement>;
            "dda-toggle": LocalJSX.DdaToggle & JSXBase.HTMLAttributes<HTMLDdaToggleElement>;
            "dda-tooltip": LocalJSX.DdaTooltip & JSXBase.HTMLAttributes<HTMLDdaTooltipElement>;
            "dda-vertical-stepper": LocalJSX.DdaVerticalStepper & JSXBase.HTMLAttributes<HTMLDdaVerticalStepperElement>;
        }
    }
}
